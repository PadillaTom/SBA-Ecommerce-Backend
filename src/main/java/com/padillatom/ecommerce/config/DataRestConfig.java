package com.padillatom.ecommerce.config;


import com.padillatom.ecommerce.model.enetity.Country;
import com.padillatom.ecommerce.model.enetity.Product;
import com.padillatom.ecommerce.model.enetity.ProductCategory;
import com.padillatom.ecommerce.model.enetity.State;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;
import org.springframework.http.HttpMethod;
import org.springframework.web.servlet.config.annotation.CorsRegistry;

import javax.persistence.EntityManager;
import javax.persistence.metamodel.EntityType;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

@Configuration
public class DataRestConfig implements RepositoryRestConfigurer {

    private EntityManager entityManager;

    public DataRestConfig (@Autowired @Lazy EntityManager entityManager){
        this.entityManager = entityManager;
    }

    @Override
    public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config, CorsRegistry cors) {
        // CORS:
        cors.addMapping("/**") //
                .allowedOrigins("*") //
                .allowedMethods("OPTIONS", "HEAD", "GET", "PUT", "POST", "DELETE", "PATCH") //
                .allowedHeaders("*") //
                .allowCredentials(false)
                .maxAge(TimeUnit.DAYS.toSeconds(1));

        // Disable HTTP Methods: POST, PUT and DELETE
        // To Be Disabled:
        HttpMethod[] theUnsupportedActions = {HttpMethod.POST, HttpMethod.PUT, HttpMethod.DELETE};
        // Classes:
        disableHttpMethods(Product.class, config, theUnsupportedActions);
        disableHttpMethods(ProductCategory.class, config, theUnsupportedActions);
        disableHttpMethods(Country.class, config, theUnsupportedActions);
        disableHttpMethods(State.class, config, theUnsupportedActions);

        // Internal Helper to modify JSON generated by Rest Data:
        exposeIds(config);
    }

    // === Disable HTTP Methods: Post Put Delete ===
    private void disableHttpMethods(Class myClass, RepositoryRestConfiguration config, HttpMethod[] theUnsupportedActions) {
        config.getExposureConfiguration()
                .forDomainType(myClass)
                .withItemExposure((metadata, httpMethods)-> httpMethods.disable(theUnsupportedActions))
                .withCollectionExposure((metadata, httpMethods)-> httpMethods.disable(theUnsupportedActions));
    }

    // === Expose IDs ===
    private void exposeIds(RepositoryRestConfiguration config){
        // Get Entities:
        Set<EntityType<?>> entities = entityManager.getMetamodel().getEntities();
        // Save them in Array:
        List<Class> entityClasses = new ArrayList<>();
        for(EntityType ent : entities) {
            entityClasses.add(ent.getJavaType());
        }
        // Expose IDs
        Class[] domainTypes = entityClasses.toArray(new Class[0]);
        config.exposeIdsFor(domainTypes);
    }

}
